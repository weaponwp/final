<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

	<beans profile="single.h2">
		<context:property-placeholder location="classpath:single/h2/jdbc.properties" ignore-unresolvable="true"/>
	</beans>

	<beans profile="single.mysql">

		<context:property-placeholder location="classpath:single/mysql/jdbc.properties" ignore-unresolvable="true"/>

		<bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource"
			destroy-method="close">
			<!-- 初始化大小、最小、最大 -->
			<property name="initialSize" value="${db.initialSize}" />
			<property name="maxActive" value="${db.maxActive}" />
			<property name="minIdle" value="${db.minIdle}" />
			<!-- 获取连接等待超时的时间 -->
			<property name="maxWait" value="${db.maxWait}" />
			<!-- 检测连接是否有效 查询语句 -->
			<property name="validationQuery" value="SELECT 1 FROM dual" />
			<!-- 申请连接检测 -->
			<property name="testWhileIdle" value="true" />
			<!-- 申请连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
			<property name="testOnBorrow" value="false" />
			<!-- 归还连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
			<property name="testOnReturn" value="false" />
			<!-- 检测需要关闭的空闲连接间隔时间，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="${db.timeRun}" />
			<!-- 一个连接最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="${db.minEvict}" />
			<!-- 超过时间限制是否回收 -->
			<property name="removeAbandoned" value="true" />
			<!-- 超时时间单位为秒 -->
			<property name="removeAbandonedTimeout" value="${db.timeOut}" />
			<!-- 关闭连接时输出错误日志 -->
			<property name="logAbandoned" value="false" />
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="mergeStat" />
		</bean>

		<bean id="dataSource" parent="baseDataSource" init-method="init">
			<property name="connectionProperties" value="${db.driverClassName}" />
			<property name="url" value="${db.url}" />
			<property name="username" value="${db.username}" />
			<property name="password" value="${db.password}" />
		</bean>
	</beans>

	<beans profile="wr.mysql">
		<context:property-placeholder location="classpath:wr/mysql/jdbc.properties" ignore-unresolvable="true"/>

		<bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource"
			destroy-method="close">
			<!-- 初始化大小、最小、最大 -->
			<property name="initialSize" value="${db.initialSize}" />
			<property name="maxActive" value="${db.maxActive}" />
			<property name="minIdle" value="${db.minIdle}" />
			<!-- 获取连接等待超时的时间 -->
			<property name="maxWait" value="${db.maxWait}" />
			<!-- 检测连接是否有效 查询语句 -->
			<property name="validationQuery" value="SELECT 1 FROM dual" />
			<!-- 申请连接检测 -->
			<property name="testWhileIdle" value="true" />
			<!-- 申请连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
			<property name="testOnBorrow" value="false" />
			<!-- 归还连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
			<property name="testOnReturn" value="false" />
			<!-- 检测需要关闭的空闲连接间隔时间，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="${db.timeRun}" />
			<!-- 一个连接最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="${db.minEvict}" />
			<!-- 超过时间限制是否回收 -->
			<property name="removeAbandoned" value="true" />
			<!-- 超时时间单位为秒 -->
			<property name="removeAbandonedTimeout" value="${db.timeOut}" />
			<!-- 关闭连接时输出错误日志 -->
			<property name="logAbandoned" value="false" />
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="mergeStat" />
		</bean>

		<bean id="writeDataSource" parent="baseDataSource" init-method="init">
			<property name="connectionProperties" value="${db.driverClassName}" />
			<property name="url" value="${db.urlwrite}" />
			<property name="username" value="${db.username}" />
			<property name="password" value="${db.password}" />
		</bean>

		<bean id="readDataSource" parent="baseDataSource" init-method="init">
			<property name="connectionProperties" value="${db.driverClassName}" />
			<property name="url" value="${db.urlwrite}" />
			<property name="username" value="${db.username}" />
			<property name="password" value="${db.password}" />
		</bean>

		<import resource="classpath:db-wr-config.xml" />
		<import resource="classpath:trans-config.xml" />

		<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
	</beans>

</beans>